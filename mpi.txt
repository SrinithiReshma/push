#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    int rank, size, local_max, global_max;
    int arr[] = {3, 7, 2, 8, 1, 9, 5, 6}; // The array to search
    int n = sizeof(arr) / sizeof(arr[0]); // Total number of elements

    MPI_Init(&argc, &argv);              // Initialize MPI
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); // Get process rank
    MPI_Comm_size(MPI_COMM_WORLD, &size); // Get number of processes

    // Divide the array among processes
    int chunk_size = n / size;
    int start = rank * chunk_size;
    int end = (rank == size - 1) ? n : start + chunk_size;

    // Each process finds the maximum in its chunk
    local_max = arr[start];
    for (int i = start + 1; i < end; i++) {
        if (arr[i] > local_max) {
            local_max = arr[i];
        }
    }

    // Use MPI_Reduce to find the global maximum
    MPI_Reduce(&local_max, &global_max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);

    // The root process prints the result
    if (rank == 0) {
        printf("The greatest number in the array is: %d\n", global_max);
    }

    MPI_Finalize(); // Finalize MPI
    return 0;
}


mpicc find_max.c -o find_max
mpirun -np 4 ./find_max


#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);  // Initialize the MPI environment

    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);  // Get the number of processes

    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);  // Get the rank of the process

    printf("Hello world from process %d of %d\n", world_rank, world_size);

    MPI_Finalize();  // Finalize the MPI environment
    return 0;
}


point-to-point communication between two processes using MPI_Send and MPI_Recv
#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);

    int number;
    if (world_rank == 0) {
        // Process 0 sends the number to process 1
        number = 42;
        MPI_Send(&number, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
        printf("Process 0 sent number %d to process 1\n", number);
    } else if (world_rank == 1) {
        // Process 1 receives the number from process 0
        MPI_Recv(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        printf("Process 1 received number %d from process 0\n", number);
    }

    MPI_Finalize();
    return 0;
}

MPI_Scatter operation, which is a collective communication operation in MPI
#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);

    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);

    int data[4] = {10, 20, 30, 40};  // Array to scatter

    int recv_data;
    MPI_Scatter(data, 1, MPI_INT, &recv_data, 1, MPI_INT, 0, MPI_COMM_WORLD);

    printf("Process %d received number %d\n", world_rank, recv_data);

    MPI_Finalize();
    return 0;
}

collective communication operation
#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);

    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);

    int send_data = world_rank * 10;  // Each process sends its rank * 10
    int recv_data[4];  // Array to collect the data in root process

    MPI_Gather(&send_data, 1, MPI_INT, recv_data, 1, MPI_INT, 0, MPI_COMM_WORLD);

    if (world_rank == 0) {
        printf("Process 0 gathered data: ");
        for (int i = 0; i < world_size; i++) {
            printf("%d ", recv_data[i]);
        }
        printf("\n");
    }

    MPI_Finalize();
    return 0;
}